{"meta":{"title":"kevin的个人博客","subtitle":null,"description":null,"author":"kevin","url":"https://youlingred.github.io"},"pages":[{"title":"分类","date":"2018-05-30T09:37:09.364Z","updated":"2018-05-30T08:03:08.000Z","comments":false,"path":"categories/index.html","permalink":"https://youlingred.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-05-30T09:37:09.388Z","updated":"2018-05-30T08:03:08.000Z","comments":false,"path":"repository/index.html","permalink":"https://youlingred.github.io/repository/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2018-05-30T09:37:09.401Z","updated":"2018-05-30T08:03:08.000Z","comments":false,"path":"/404.html","permalink":"https://youlingred.github.io//404.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-05-30T09:37:09.375Z","updated":"2018-05-30T08:03:08.000Z","comments":true,"path":"links/index.html","permalink":"https://youlingred.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-05-30T09:37:09.396Z","updated":"2018-05-30T08:03:08.000Z","comments":false,"path":"tags/index.html","permalink":"https://youlingred.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-05-30T13:38:33.900Z","updated":"2018-05-30T13:38:33.899Z","comments":false,"path":"about/index.html","permalink":"https://youlingred.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2018-05-30T09:37:09.355Z","updated":"2018-05-30T08:03:08.000Z","comments":false,"path":"books/index.html","permalink":"https://youlingred.github.io/books/index.html","excerpt":"","text":""}],"posts":[{"title":"如何删除GIT中的.DS_Store","slug":"如何删除GIT中的.DS_Store","date":"2018-06-01T08:45:38.000Z","updated":"2018-06-01T08:55:55.104Z","comments":true,"path":"2018/06/01/如何删除GIT中的.DS_Store/","link":"","permalink":"https://youlingred.github.io/2018/06/01/如何删除GIT中的.DS_Store/","excerpt":"","text":".DS_Store 是什么使用 Mac 的用户可能会注意到，系统经常会自动在每个目录生成一个隐藏的 .DS_Store 文件。.DS_Store(英文全称 Desktop Services Store)是一种由苹果公司的Mac OS X操作系统所创造的隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。相当于 Windows 下的 desktop.ini。 删除 .DS_Store如果你的项目中还没有自动生成的 .DS_Store 文件，那么直接将 .DS_Store 加入到 .gitignore 文件就可以了。如果你的项目中已经存在 .DS_Store 文件，那就需要先从项目中将其删除，再将它加入到 .gitignore。如下： 1234567# 删除项目中的所有.DS_Store。这会跳过不在项目中的 .DS_Store$ find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch# 将 .DS_Store 加入到 .gitignore$ echo .DS_Store &gt;&gt; ~/.gitignore# 更新项目$ git add --all$ git commit -m '.DS_Store banished!' 如果你只需要删除磁盘上的 .DS_Store，可以使用下面的命令来删除当前目录及其子目录下的所有.DS_Store 文件:1$ find . -name '*.DS_Store' -type f -delete 禁用或启用自动生成禁止.DS_store生成： 1$ defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool T 恢复.DS_store生成：恢复.DS_store生成： 1$ defaults delete com.apple.desktopservices DSDontWriteNetworkStores","categories":[{"name":"git","slug":"git","permalink":"https://youlingred.github.io/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://youlingred.github.io/tags/git/"},{"name":"文件","slug":"文件","permalink":"https://youlingred.github.io/tags/文件/"},{"name":"mac","slug":"mac","permalink":"https://youlingred.github.io/tags/mac/"}]},{"title":"lerna使用教程","slug":"lerna使用教程","date":"2018-06-01T06:37:39.000Z","updated":"2018-06-01T08:01:56.834Z","comments":true,"path":"2018/06/01/lerna使用教程/","link":"","permalink":"https://youlingred.github.io/2018/06/01/lerna使用教程/","excerpt":"","text":"为什么使用lerna模块化编程中代码库拆分和代码共享非常普遍，如果能把拆分的模块作为单独的node包来发布，通过npm分发代码可以得到很好的共用。但是这需要每个模块配置一个package.json，管理、测试、发布、更新都比较麻烦，这就需要lerna这样的工具来弥补npm的不足。Lerna是一个工具，可以优化使用git和npm管理多包存储库的工作流程。 一个lerna的repo结构就像这样：每个package都是可以发不成一个node模块1234567my-lerna-repo/ package.json packages/ package-1/ package.json package-2/ package.json 安装lerna通过npm安装lerna 下面三个命令任意选一个执行即可 12345$ npm install --global lerna# install the latest 2.x version using the `prerelease` dist-tag $ npm install --global lerna@prerelease# install version directly $ npm install --global lerna@^2.0.0-beta 创建文件夹12$ mkdir lerna-repo$ cd lerna-repo 初始化1$ lerna init repo目录结构1234lerna-repo/ packages/ package.json lerna.json","categories":[{"name":"node","slug":"node","permalink":"https://youlingred.github.io/categories/node/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://youlingred.github.io/tags/工具/"},{"name":"多包管理","slug":"多包管理","permalink":"https://youlingred.github.io/tags/多包管理/"}]},{"title":"unit单元测试和e2e端到端测试的区别","slug":"unit单元测试和e2e端到端测试的区别","date":"2018-05-31T12:20:36.000Z","updated":"2018-05-31T12:25:43.984Z","comments":true,"path":"2018/05/31/unit单元测试和e2e端到端测试的区别/","link":"","permalink":"https://youlingred.github.io/2018/05/31/unit单元测试和e2e端到端测试的区别/","excerpt":"","text":"前端实现自动化就要借助到unit和e2e端到端测试了 unit测试站在程序员的角度测试unit测试是把代码看成是一个个的组件。从而实现每一个组件的单独测试，测试内容主要是组件内每一个函数的返回结果是不是和期望值一样。例如： 12345const compare = (a,b) =&gt; a&gt;b?a:b对这个函数进行测试expect(compare(1,2)).to.equal(2) //okexpect(compare(2,1)).to.equal(1) //ok测试完成 而代码覆盖率是指代码中每一个函数的每一中情况的测试情况，上述测试的代码覆盖率是100% 1234const compare = (a,b) =&gt; a&gt;b?a:b对这个函数进行测试expect(compare(2,1)).to.equal(1) //ok测试完成 这样代码覆盖率是50%，因为else情况没有测试到 e2e测试站在用户角度的测试e2e测试是把我们的程序堪称是一个黑盒子，我不懂你内部是怎么实现的，我只负责打开浏览器，把测试内容在页面上输入一遍，看是不是我想要得到的结果。 两者的存在都是很有意义的。unit测试是程序员写好自己的逻辑后可以很容易的测试自己的逻辑返回的是不是都正确。e2e代码是测试所有的需求是不是都可以正确的完成，而且最终要的是在代码重构，js改动很多之后，需要对需求进行测试的时候测试代码是不需要改变的，你也不用担心在重构后不能达到客户的需求。","categories":[{"name":"知识点","slug":"知识点","permalink":"https://youlingred.github.io/categories/知识点/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://youlingred.github.io/tags/测试/"},{"name":"单元测试","slug":"单元测试","permalink":"https://youlingred.github.io/tags/单元测试/"},{"name":"端到端测试","slug":"端到端测试","permalink":"https://youlingred.github.io/tags/端到端测试/"}]},{"title":"从零始使用hexo搭建博客教程","slug":"从零始使用hexo搭建博客教程 ","date":"2018-05-31T12:15:17.140Z","updated":"2018-05-31T12:15:17.140Z","comments":true,"path":"2018/05/31/从零始使用hexo搭建博客教程 /","link":"","permalink":"https://youlingred.github.io/2018/05/31/从零始使用hexo搭建博客教程 /","excerpt":"","text":"Hexo Hexo中文 Markdown教程什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装 Node.js Git mac环境 安装Node安装完node我们就可以使用npm 直接下载nodejs安装 通过Homebrew安装 命令行执行: 1$ brew install node 安装git 直接下载Git安装 通过Homebrew安装 命令行执行: 1$ brew install git 安装hexo1$ sudo npm install -g hexo-cli Mac 用户您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。 windows环境 安装Node安装完node我们就可以使用npm 直接下载nodejs安装 安装git下载Git安装 安装hexo1$ sudo npm install -g hexo-cli Windows 用户对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://youlingred.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://youlingred.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://youlingred.github.io/tags/blog/"},{"name":"github.io","slug":"github-io","permalink":"https://youlingred.github.io/tags/github-io/"}]},{"title":"cypress前端E2E(端到端)测试框架","slug":"cypress前端E2E(端到端)测试框架","date":"2018-05-31T12:12:43.000Z","updated":"2018-05-31T13:40:11.754Z","comments":true,"path":"2018/05/31/cypress前端E2E(端到端)测试框架/","link":"","permalink":"https://youlingred.github.io/2018/05/31/cypress前端E2E(端到端)测试框架/","excerpt":"","text":"Cypress Cypress 是什么官网视频 如果不太清楚单元测试和端到端测试的区别请看这里 Cypress是什么Cypress是为现代网络而构建的下一代前端测试工具,解决开发人员和QA工程师在面对应用测试过程的痛点. 使以下过程简单化: 配置测试 编写测试 运行调试 调试测试 Cypress通常与Selenium相提并论; 然而两者在结构和基础上都有所不同。Cypress不会让你像Selenium一样受限。 这使你可以编写更快，更简单，更可靠的测试。","categories":[{"name":"node","slug":"node","permalink":"https://youlingred.github.io/categories/node/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://youlingred.github.io/tags/工具/"},{"name":"测试","slug":"测试","permalink":"https://youlingred.github.io/tags/测试/"},{"name":"端到端","slug":"端到端","permalink":"https://youlingred.github.io/tags/端到端/"}]}]}