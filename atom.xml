<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kevin的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://youlingred.github.io/"/>
  <updated>2018-06-01T08:55:55.104Z</updated>
  <id>https://youlingred.github.io/</id>
  
  <author>
    <name>kevin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何删除GIT中的.DS_Store</title>
    <link href="https://youlingred.github.io/2018/06/01/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4GIT%E4%B8%AD%E7%9A%84.DS_Store/"/>
    <id>https://youlingred.github.io/2018/06/01/如何删除GIT中的.DS_Store/</id>
    <published>2018-06-01T08:45:38.000Z</published>
    <updated>2018-06-01T08:55:55.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DS-Store-是什么"><a href="#DS-Store-是什么" class="headerlink" title=".DS_Store 是什么"></a>.DS_Store 是什么</h2><p>使用 Mac 的用户可能会注意到，系统经常会自动在每个目录生成一个隐藏的 .DS_Store 文件。.DS_Store(英文全称 Desktop Services Store)是一种由苹果公司的Mac OS X操作系统所创造的隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。相当于 Windows 下的 desktop.ini。</p><h2 id="删除-DS-Store"><a href="#删除-DS-Store" class="headerlink" title="删除 .DS_Store"></a>删除 .DS_Store</h2><p>如果你的项目中还没有自动生成的 .DS_Store 文件，那么直接将 .DS_Store 加入到 .gitignore 文件就可以了。如果你的项目中已经存在 .DS_Store 文件，那就需要先从项目中将其删除，再将它加入到 .gitignore。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除项目中的所有.DS_Store。这会跳过不在项目中的 .DS_Store</span></span><br><span class="line">$ find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch</span><br><span class="line"><span class="comment"># 将 .DS_Store 加入到 .gitignore</span></span><br><span class="line">$ <span class="built_in">echo</span> .DS_Store &gt;&gt; ~/.gitignore</span><br><span class="line"><span class="comment"># 更新项目</span></span><br><span class="line">$ git add --all</span><br><span class="line">$ git commit -m <span class="string">'.DS_Store banished!'</span></span><br></pre></td></tr></table></figure><p>如果你只需要删除磁盘上的 .DS_Store，可以使用下面的命令来删除当前目录及其子目录下的所有.DS_Store 文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find . -name <span class="string">'*.DS_Store'</span> -<span class="built_in">type</span> f -delete</span><br></pre></td></tr></table></figure></p><h2 id="禁用或启用自动生成"><a href="#禁用或启用自动生成" class="headerlink" title="禁用或启用自动生成"></a>禁用或启用自动生成</h2><p>禁止.DS_store生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool T</span><br></pre></td></tr></table></figure><p>恢复.DS_store生成：恢复.DS_store生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ defaults delete com.apple.desktopservices DSDontWriteNetworkStores</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DS-Store-是什么&quot;&gt;&lt;a href=&quot;#DS-Store-是什么&quot; class=&quot;headerlink&quot; title=&quot;.DS_Store 是什么&quot;&gt;&lt;/a&gt;.DS_Store 是什么&lt;/h2&gt;&lt;p&gt;使用 Mac 的用户可能会注意到，系统经常会自动在每个目
      
    
    </summary>
    
      <category term="git" scheme="https://youlingred.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://youlingred.github.io/tags/git/"/>
    
      <category term="文件" scheme="https://youlingred.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="mac" scheme="https://youlingred.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>lerna使用教程</title>
    <link href="https://youlingred.github.io/2018/06/01/lerna%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://youlingred.github.io/2018/06/01/lerna使用教程/</id>
    <published>2018-06-01T06:37:39.000Z</published>
    <updated>2018-06-01T08:01:56.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么使用lerna"><a href="#为什么使用lerna" class="headerlink" title="为什么使用lerna"></a>为什么使用lerna</h2><p>模块化编程中<code>代码库拆分</code>和<code>代码共享</code>非常普遍，如果能把拆分的模块作为单独的node包来发布，通过npm分发代码可以得到很好的共用。但是这需要每个模块配置一个package.json，管理、测试、发布、更新都比较麻烦，这就需要lerna这样的工具来弥补npm的不足。<br><b>Lerna是一个工具，可以优化使用git和npm管理多包存储库的工作流程。</b></p><h2 id="一个lerna的repo结构就像这样："><a href="#一个lerna的repo结构就像这样：" class="headerlink" title="一个lerna的repo结构就像这样："></a>一个lerna的repo结构就像这样：</h2><p>每个package都是可以发不成一个node模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my-lerna-repo/</span><br><span class="line">  package.json</span><br><span class="line">  packages/</span><br><span class="line">    package-1/</span><br><span class="line">      package.json</span><br><span class="line">    package-2/</span><br><span class="line">      package.json</span><br></pre></td></tr></table></figure></p><h2 id="安装lerna"><a href="#安装lerna" class="headerlink" title="安装lerna"></a>安装lerna</h2><h3 id="通过npm安装lerna"><a href="#通过npm安装lerna" class="headerlink" title="通过npm安装lerna"></a>通过npm安装lerna</h3><p> 下面三个命令任意选一个执行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global lerna</span><br><span class="line"><span class="comment"># install the latest 2.x version using the `prerelease` dist-tag </span></span><br><span class="line">$ npm install --global lerna@prerelease</span><br><span class="line"><span class="comment"># install version directly </span></span><br><span class="line">$ npm install --global lerna@^2.0.0-beta</span><br></pre></td></tr></table></figure><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir lerna-repo</span><br><span class="line">$ <span class="built_in">cd</span> lerna-repo</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lerna init</span><br></pre></td></tr></table></figure><h3 id="repo目录结构"><a href="#repo目录结构" class="headerlink" title="repo目录结构"></a>repo目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lerna-repo/</span><br><span class="line">  packages/</span><br><span class="line">  package.json</span><br><span class="line">  lerna.json</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么使用lerna&quot;&gt;&lt;a href=&quot;#为什么使用lerna&quot; class=&quot;headerlink&quot; title=&quot;为什么使用lerna&quot;&gt;&lt;/a&gt;为什么使用lerna&lt;/h2&gt;&lt;p&gt;模块化编程中&lt;code&gt;代码库拆分&lt;/code&gt;和&lt;code&gt;代码共享&lt;/c
      
    
    </summary>
    
      <category term="node" scheme="https://youlingred.github.io/categories/node/"/>
    
    
      <category term="工具" scheme="https://youlingred.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="多包管理" scheme="https://youlingred.github.io/tags/%E5%A4%9A%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>unit单元测试和e2e端到端测试的区别</title>
    <link href="https://youlingred.github.io/2018/05/31/unit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%92%8Ce2e%E7%AB%AF%E5%88%B0%E7%AB%AF%E6%B5%8B%E8%AF%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://youlingred.github.io/2018/05/31/unit单元测试和e2e端到端测试的区别/</id>
    <published>2018-05-31T12:20:36.000Z</published>
    <updated>2018-05-31T12:25:43.984Z</updated>
    
    <content type="html"><![CDATA[<p>前端实现自动化就要借助到unit和e2e端到端测试了</p><h2 id="unit测试"><a href="#unit测试" class="headerlink" title="unit测试"></a>unit测试</h2><p>站在程序员的角度测试<br>unit测试是把代码看成是一个个的组件。从而实现每一个组件的单独测试，测试内容主要是组件内每一个函数的返回结果是不是和期望值一样。<br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compare = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a&gt;b?a:b</span><br><span class="line">对这个函数进行测试</span><br><span class="line">expect(compare(<span class="number">1</span>,<span class="number">2</span>)).to.equal(<span class="number">2</span>) <span class="comment">//ok</span></span><br><span class="line">expect(compare(<span class="number">2</span>,<span class="number">1</span>)).to.equal(<span class="number">1</span>) <span class="comment">//ok</span></span><br><span class="line">测试完成</span><br></pre></td></tr></table></figure><p>而代码覆盖率是指代码中每一个函数的每一中情况的测试情况，上述测试的代码覆盖率是100%</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compare = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a&gt;b?a:b</span><br><span class="line">对这个函数进行测试</span><br><span class="line">expect(compare(<span class="number">2</span>,<span class="number">1</span>)).to.equal(<span class="number">1</span>) <span class="comment">//ok</span></span><br><span class="line">测试完成</span><br></pre></td></tr></table></figure><p>这样代码覆盖率是50%，因为else情况没有测试到</p><h2 id="e2e测试"><a href="#e2e测试" class="headerlink" title="e2e测试"></a>e2e测试</h2><p>站在用户角度的测试<br>e2e测试是把我们的程序堪称是一个黑盒子，我不懂你内部是怎么实现的，我只负责打开浏览器，把测试内容在页面上输入一遍，看是不是我想要得到的结果。</p><p>两者的存在都是很有意义的。<br>unit测试是程序员写好自己的逻辑后可以很容易的测试自己的逻辑返回的是不是都正确。<br>e2e代码是测试所有的需求是不是都可以正确的完成，而且最终要的是在代码重构，js改动很多之后，需要对需求进行测试的时候测试代码是不需要改变的，你也不用担心在重构后不能达到客户的需求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前端实现自动化就要借助到unit和e2e端到端测试了&lt;/p&gt;
&lt;h2 id=&quot;unit测试&quot;&gt;&lt;a href=&quot;#unit测试&quot; class=&quot;headerlink&quot; title=&quot;unit测试&quot;&gt;&lt;/a&gt;unit测试&lt;/h2&gt;&lt;p&gt;站在程序员的角度测试&lt;br&gt;unit测试
      
    
    </summary>
    
      <category term="知识点" scheme="https://youlingred.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="测试" scheme="https://youlingred.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="单元测试" scheme="https://youlingred.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="端到端测试" scheme="https://youlingred.github.io/tags/%E7%AB%AF%E5%88%B0%E7%AB%AF%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>从零始使用hexo搭建博客教程</title>
    <link href="https://youlingred.github.io/2018/05/31/%E4%BB%8E%E9%9B%B6%E5%A7%8B%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%20/"/>
    <id>https://youlingred.github.io/2018/05/31/从零始使用hexo搭建博客教程 /</id>
    <published>2018-05-31T12:15:17.140Z</published>
    <updated>2018-05-31T12:15:17.140Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></li><li><a href="https://hexo.io/zh-cn" target="_blank" rel="noopener">Hexo中文</a></li><li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown教程</a><h1 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h1>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://daringfireball.net/projects/markdown" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><h3 id="mac环境"><a href="#mac环境" class="headerlink" title="mac环境"></a>mac环境</h3><hr><h4 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h4><p>安装完node我们就可以使用<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a></p><ol><li><p>直接下载<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">nodejs</a>安装</p></li><li><p>通过<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">Homebrew</a>安装</p><p>命令行执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure></li></ol><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><ol><li><p>直接下载<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>安装</p></li><li><p>通过<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">Homebrew</a>安装</p><p>命令行执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure></li></ol><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><blockquote><h3 id="Mac-用户"><a href="#Mac-用户" class="headerlink" title="Mac 用户"></a>Mac 用户</h3><p>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p></blockquote><h3 id="windows环境"><a href="#windows环境" class="headerlink" title="windows环境"></a>windows环境</h3><hr><h4 id="安装Node-1"><a href="#安装Node-1" class="headerlink" title="安装Node"></a>安装Node</h4><p>安装完node我们就可以使用<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a></p><p>直接下载<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">nodejs</a>安装</p><h4 id="安装git-1"><a href="#安装git-1" class="headerlink" title="安装git"></a>安装git</h4><p>下载<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>安装</p><h4 id="安装hexo-1"><a href="#安装hexo-1" class="headerlink" title="安装hexo"></a>安装hexo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><blockquote><h3 id="Windows-用户"><a href="#Windows-用户" class="headerlink" title="Windows 用户"></a>Windows 用户</h3><p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br>另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="Hexo" scheme="https://youlingred.github.io/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="https://youlingred.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://youlingred.github.io/tags/blog/"/>
    
      <category term="github.io" scheme="https://youlingred.github.io/tags/github-io/"/>
    
  </entry>
  
  <entry>
    <title>cypress前端E2E(端到端)测试框架</title>
    <link href="https://youlingred.github.io/2018/05/31/cypress%E5%89%8D%E7%AB%AFE2E(%E7%AB%AF%E5%88%B0%E7%AB%AF)%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>https://youlingred.github.io/2018/05/31/cypress前端E2E(端到端)测试框架/</id>
    <published>2018-05-31T12:12:43.000Z</published>
    <updated>2018-05-31T13:40:11.754Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a></li></ul><p><iframe src="https://player.vimeo.com/video/237527670?title=0&byline=0&portrait=0" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe><br><code>Cypress 是什么</code><a href="https://www.cypress.io/" target="_blank" rel="noopener">官网</a>视频</p><p>如果不太清楚<code>单元测试</code>和<code>端到端测试</code>的区别请看<a href="../unit-e2e">这里</a></p><h2 id="Cypress是什么"><a href="#Cypress是什么" class="headerlink" title="Cypress是什么"></a>Cypress是什么</h2><p>Cypress是为现代网络而构建的下一代前端测试工具,解决开发人员和QA工程师在面对应用测试过程的痛点.</p><p>使以下过程简单化:</p><ul><li><code>配置测试</code></li><li><code>编写测试</code></li><li><code>运行调试</code></li><li><code>调试测试</code></li></ul><p><code>Cypress</code>通常与<code>Selenium</code>相提并论; 然而两者在结构和基础上都有所不同。Cypress不会让你像Selenium一样受限。</p><p>这使你可以编写更快，更简单，更可靠的测试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cypress.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cypress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;iframe src=&quot;https://player.vimeo.com/vi
      
    
    </summary>
    
      <category term="node" scheme="https://youlingred.github.io/categories/node/"/>
    
    
      <category term="工具" scheme="https://youlingred.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="测试" scheme="https://youlingred.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="端到端" scheme="https://youlingred.github.io/tags/%E7%AB%AF%E5%88%B0%E7%AB%AF/"/>
    
  </entry>
  
</feed>
